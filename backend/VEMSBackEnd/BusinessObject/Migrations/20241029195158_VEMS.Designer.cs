// <auto-generated />
using System;
using BusinessObject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessObject.Migrations
{
    [DbContext(typeof(VemsContext))]
    [Migration("20241029195158_VEMS")]
    partial class VEMS
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Admin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("varchar");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b584540e-49d9-4d45-bef4-f779f8e6c973"),
                            Email = "admin1@email.com",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            RefreshToken = "",
                            RoleId = new Guid("04c92fd7-51b1-4852-8b8a-cacbe1511670"),
                            Username = "admin1"
                        },
                        new
                        {
                            Id = new Guid("5b909d16-c9e6-42bc-b46c-d766280d93b8"),
                            Email = "admin2@email.com",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            RefreshToken = "",
                            RoleId = new Guid("04c92fd7-51b1-4852-8b8a-cacbe1511670"),
                            Username = "admin2"
                        });
                });

            modelBuilder.Entity("BusinessObject.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ScheduleDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TimeReport")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleDetailId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("BusinessObject.AttendanceCharge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttendanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("StudentId");

                    b.ToTable("AttendanceCharges");
                });

            modelBuilder.Entity("BusinessObject.AttendanceStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttendanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ReasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AttendanceStatuses");
                });

            modelBuilder.Entity("BusinessObject.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f3bc74d1-04c8-47c9-b569-d9aaf268f195"),
                            ClassName = "10A1",
                            GradeId = new Guid("11f87b17-a80c-4420-b368-4680920bfe3d")
                        },
                        new
                        {
                            Id = new Guid("d2a5a5a1-87c6-4714-bbfd-176571ebf89a"),
                            ClassName = "10A2",
                            GradeId = new Guid("11f87b17-a80c-4420-b368-4680920bfe3d")
                        },
                        new
                        {
                            Id = new Guid("79dfe9dc-2b47-4222-bce2-7c85e91424d6"),
                            ClassName = "10A3",
                            GradeId = new Guid("11f87b17-a80c-4420-b368-4680920bfe3d")
                        },
                        new
                        {
                            Id = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            ClassName = "10A4",
                            GradeId = new Guid("11f87b17-a80c-4420-b368-4680920bfe3d")
                        },
                        new
                        {
                            Id = new Guid("01c6d903-784d-45fb-8511-47e9d6ff7611"),
                            ClassName = "10A5",
                            GradeId = new Guid("11f87b17-a80c-4420-b368-4680920bfe3d")
                        },
                        new
                        {
                            Id = new Guid("8f3cdace-270e-41bc-8ee5-0d07321c7975"),
                            ClassName = "11A1",
                            GradeId = new Guid("afa373a9-b9ab-4561-97b1-549b76f91190")
                        },
                        new
                        {
                            Id = new Guid("a71d8e2d-6e7d-44a5-a8be-cd9757f199be"),
                            ClassName = "11A2",
                            GradeId = new Guid("afa373a9-b9ab-4561-97b1-549b76f91190")
                        },
                        new
                        {
                            Id = new Guid("3df0676a-021e-4a1f-a082-fa88b6dbe200"),
                            ClassName = "11A3",
                            GradeId = new Guid("afa373a9-b9ab-4561-97b1-549b76f91190")
                        },
                        new
                        {
                            Id = new Guid("88660625-222d-48e7-bef7-aa2fae36d968"),
                            ClassName = "11A4",
                            GradeId = new Guid("afa373a9-b9ab-4561-97b1-549b76f91190")
                        },
                        new
                        {
                            Id = new Guid("c7235f3d-8414-4832-b0c5-a97781490a48"),
                            ClassName = "11A5",
                            GradeId = new Guid("afa373a9-b9ab-4561-97b1-549b76f91190")
                        },
                        new
                        {
                            Id = new Guid("11521ae4-fd95-474c-8d3e-e8ca3cbc21f3"),
                            ClassName = "12A1",
                            GradeId = new Guid("b6e0255a-aeee-4df7-8754-55dd27d360b2")
                        },
                        new
                        {
                            Id = new Guid("ddd7dda5-a208-4ccc-947e-c96e603a4609"),
                            ClassName = "12A2",
                            GradeId = new Guid("b6e0255a-aeee-4df7-8754-55dd27d360b2")
                        },
                        new
                        {
                            Id = new Guid("8fb55a60-4d64-4eb7-9ae1-4202cd25d9e2"),
                            ClassName = "12A3",
                            GradeId = new Guid("b6e0255a-aeee-4df7-8754-55dd27d360b2")
                        },
                        new
                        {
                            Id = new Guid("7dbe0c01-40e0-4e8b-8112-0f4c01d6eb2f"),
                            ClassName = "12A4",
                            GradeId = new Guid("b6e0255a-aeee-4df7-8754-55dd27d360b2")
                        },
                        new
                        {
                            Id = new Guid("9c62f26b-a825-4ee5-9c0a-09cd0aff7409"),
                            ClassName = "12A5",
                            GradeId = new Guid("b6e0255a-aeee-4df7-8754-55dd27d360b2")
                        },
                        new
                        {
                            Id = new Guid("b4c997f3-3d75-4b63-bd19-7d849999481c"),
                            ClassName = "12A6",
                            GradeId = new Guid("b6e0255a-aeee-4df7-8754-55dd27d360b2")
                        });
                });

            modelBuilder.Entity("BusinessObject.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("BusinessObject.EmailToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("EmailTokens");
                });

            modelBuilder.Entity("BusinessObject.ExtraActivitiesAttendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AttendanceAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("AttendanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StudentId");

                    b.ToTable("ExtraActivitiesAttendances");
                });

            modelBuilder.Entity("BusinessObject.Grade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("GradeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Grades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11f87b17-a80c-4420-b368-4680920bfe3d"),
                            GradeName = "10"
                        },
                        new
                        {
                            Id = new Guid("afa373a9-b9ab-4561-97b1-549b76f91190"),
                            GradeName = "11"
                        },
                        new
                        {
                            Id = new Guid("b6e0255a-aeee-4df7-8754-55dd27d360b2"),
                            GradeName = "12"
                        });
                });

            modelBuilder.Entity("BusinessObject.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PeriodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Periods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("064eaf1f-a520-4eda-b179-a2c38811ad0b"),
                            Code = "MORNING",
                            PeriodName = "Sáng",
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("2b5e92f3-430b-4b48-8048-ca2ca8d0ef31"),
                            Code = "AFTERNOON",
                            PeriodName = "Chiều",
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("BusinessObject.Reason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ReasonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Reasons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("23f45441-d948-4a53-8a96-bc8be963b9e2"),
                            Description = "",
                            ReasonName = "Do ốm đau"
                        },
                        new
                        {
                            Id = new Guid("17fea884-62f6-4686-b2ae-2a18ae4b2b82"),
                            Description = "",
                            ReasonName = "Đang nằm viện"
                        },
                        new
                        {
                            Id = new Guid("c4990d24-c573-4b40-ad01-c3f39042bad9"),
                            Description = "",
                            ReasonName = "Nhà có việc hữu sự"
                        },
                        new
                        {
                            Id = new Guid("169dcff1-cb19-4fd0-8ae3-f947360207cf"),
                            Description = "",
                            ReasonName = "Công tác, HSG"
                        },
                        new
                        {
                            Id = new Guid("71e82443-08e8-4500-90f6-71732fd96ded"),
                            Description = "",
                            ReasonName = "Khám NVQS"
                        },
                        new
                        {
                            Id = new Guid("e847e40e-e759-413a-adc3-b2a7fe72c128"),
                            Description = "",
                            ReasonName = "Khác"
                        });
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04c92fd7-51b1-4852-8b8a-cacbe1511670"),
                            Code = "ADMIN",
                            RoleName = "Quản trị viên"
                        },
                        new
                        {
                            Id = new Guid("81b3444c-c9fd-4efc-a774-e1e3fc3c3e53"),
                            Code = "TEACHER",
                            RoleName = "Giáo viên"
                        },
                        new
                        {
                            Id = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            Code = "STUDENT",
                            RoleName = "Học sinh"
                        });
                });

            modelBuilder.Entity("BusinessObject.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("BusinessObject.ScheduleDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SessionId");

                    b.ToTable("ScheduleDetails");
                });

            modelBuilder.Entity("BusinessObject.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.Property<Guid>("PeriodID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PeriodID");

                    b.ToTable("Sessions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fa3d575-2f46-4615-aa63-ab53dc32bd8b"),
                            DayOfWeek = 1,
                            PeriodID = new Guid("064eaf1f-a520-4eda-b179-a2c38811ad0b")
                        },
                        new
                        {
                            Id = new Guid("32f10e78-2737-4cab-a74a-f7986f1c5bca"),
                            DayOfWeek = 1,
                            PeriodID = new Guid("2b5e92f3-430b-4b48-8048-ca2ca8d0ef31")
                        },
                        new
                        {
                            Id = new Guid("02505d8c-8c01-4734-b79c-a053e9c86f9d"),
                            DayOfWeek = 2,
                            PeriodID = new Guid("064eaf1f-a520-4eda-b179-a2c38811ad0b")
                        },
                        new
                        {
                            Id = new Guid("55987953-39cd-43f7-84ee-84b79170e7fd"),
                            DayOfWeek = 2,
                            PeriodID = new Guid("2b5e92f3-430b-4b48-8048-ca2ca8d0ef31")
                        },
                        new
                        {
                            Id = new Guid("6c6b00cc-1030-4029-aaf5-299019bd303d"),
                            DayOfWeek = 3,
                            PeriodID = new Guid("064eaf1f-a520-4eda-b179-a2c38811ad0b")
                        },
                        new
                        {
                            Id = new Guid("6be09935-4ba1-42e2-9ccc-ab66fe1569a3"),
                            DayOfWeek = 3,
                            PeriodID = new Guid("2b5e92f3-430b-4b48-8048-ca2ca8d0ef31")
                        },
                        new
                        {
                            Id = new Guid("2246a4b5-1dc9-4b8b-a6ea-f4e3d2635249"),
                            DayOfWeek = 4,
                            PeriodID = new Guid("064eaf1f-a520-4eda-b179-a2c38811ad0b")
                        },
                        new
                        {
                            Id = new Guid("c1188b95-fcb3-4d83-8ac0-04c0f26fbb3d"),
                            DayOfWeek = 4,
                            PeriodID = new Guid("2b5e92f3-430b-4b48-8048-ca2ca8d0ef31")
                        },
                        new
                        {
                            Id = new Guid("5abe297f-e351-4939-bded-ec538c595417"),
                            DayOfWeek = 5,
                            PeriodID = new Guid("064eaf1f-a520-4eda-b179-a2c38811ad0b")
                        },
                        new
                        {
                            Id = new Guid("d1f42050-c53b-45bf-8473-ebc14c01d4b7"),
                            DayOfWeek = 5,
                            PeriodID = new Guid("2b5e92f3-430b-4b48-8048-ca2ca8d0ef31")
                        },
                        new
                        {
                            Id = new Guid("b53c2d5c-bc63-4c0d-84c7-d3a69073879c"),
                            DayOfWeek = 6,
                            PeriodID = new Guid("064eaf1f-a520-4eda-b179-a2c38811ad0b")
                        },
                        new
                        {
                            Id = new Guid("32196bfb-4117-4fc7-a0d7-7c2751544d1e"),
                            DayOfWeek = 6,
                            PeriodID = new Guid("2b5e92f3-430b-4b48-8048-ca2ca8d0ef31")
                        });
                });

            modelBuilder.Entity("BusinessObject.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<int>("SlotIndex")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = new Guid("db1085ce-9ba3-4894-a8a0-d417bc6b0774"),
                            EndTime = new TimeSpan(0, 7, 45, 0, 0),
                            SlotIndex = 1,
                            StartTime = new TimeSpan(0, 7, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("0811126b-4fb3-4e29-b0f6-94b00bf0b98b"),
                            EndTime = new TimeSpan(0, 8, 45, 0, 0),
                            SlotIndex = 2,
                            StartTime = new TimeSpan(0, 8, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("b2e5cc3b-f6f2-427e-9d9e-1f44ee8d2e80"),
                            EndTime = new TimeSpan(0, 9, 50, 0, 0),
                            SlotIndex = 3,
                            StartTime = new TimeSpan(0, 9, 5, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e8b4217f-5a6c-4428-9901-99e62ce1f562"),
                            EndTime = new TimeSpan(0, 10, 40, 0, 0),
                            SlotIndex = 4,
                            StartTime = new TimeSpan(0, 9, 55, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("4ebda95f-f406-43d2-a88b-be2b1ddbe1b5"),
                            EndTime = new TimeSpan(0, 11, 30, 0, 0),
                            SlotIndex = 5,
                            StartTime = new TimeSpan(0, 10, 45, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("c5b67725-545f-4edd-8198-05bedcb5b00f"),
                            EndTime = new TimeSpan(0, 14, 45, 0, 0),
                            SlotIndex = 6,
                            StartTime = new TimeSpan(0, 14, 0, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("9495ef71-051d-4e1b-9de3-31fa6d238252"),
                            EndTime = new TimeSpan(0, 13, 40, 0, 0),
                            SlotIndex = 7,
                            StartTime = new TimeSpan(0, 14, 55, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("79e57c6a-fae8-42b4-a460-b48447e3e076"),
                            EndTime = new TimeSpan(0, 16, 35, 0, 0),
                            SlotIndex = 8,
                            StartTime = new TimeSpan(0, 15, 50, 0, 0)
                        },
                        new
                        {
                            Id = new Guid("e1e53de7-7170-46b4-8230-2790c42a7cac"),
                            EndTime = new TimeSpan(0, 17, 30, 0, 0),
                            SlotIndex = 9,
                            StartTime = new TimeSpan(0, 16, 45, 0, 0)
                        });
                });

            modelBuilder.Entity("BusinessObject.SlotDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassroomID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SessionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SlotID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubjectID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomID");

                    b.HasIndex("SessionID");

                    b.HasIndex("SlotID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("TeacherID");

                    b.ToTable("SlotDetails");
                });

            modelBuilder.Entity("BusinessObject.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b16d2725-e2d4-47a8-8709-0c0c1ca3945d"),
                            Code = "NOT_MARKED",
                            StatusName = "Chưa điểm danh"
                        },
                        new
                        {
                            Id = new Guid("f60aaf45-9e88-4818-9ed0-3e8f83bfb66e"),
                            Code = "ATTENDED",
                            StatusName = "Có mặt"
                        },
                        new
                        {
                            Id = new Guid("ac6ff8a5-2017-402a-8966-9ce59146c689"),
                            Code = "ABSENTED_WITHOUT_PERMISSION",
                            StatusName = "Vắng mặt không phép"
                        },
                        new
                        {
                            Id = new Guid("3e04faa2-5c62-43c6-be78-01f114d01446"),
                            Code = "ABSENTED_WITH_PERMISSION",
                            StatusName = "Vắng mặt có phép"
                        });
                });

            modelBuilder.Entity("BusinessObject.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<string>("CitizenID")
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("HomeTown")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar");

                    b.Property<string>("ParentPhone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("Password")
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("PublicStudentID")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StudentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly?>("UnionJoinDate")
                        .HasColumnType("date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StudentTypeId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("55318f46-c41e-4288-a006-3a84a7aeb195"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "nguyen.a@example.com",
                            FullName = "Nguyễn Văn A",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900641/7_plw6ns.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU101",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU101"
                        },
                        new
                        {
                            Id = new Guid("34701b21-d0ce-4a2e-bbf8-b7218308e20f"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "tran.b@example.com",
                            FullName = "Trần Thị B",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900641/6_ydar9m.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU102",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU102"
                        },
                        new
                        {
                            Id = new Guid("7acdd980-b6c3-48c9-a40e-81a5c53c3b84"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "le.c@example.com",
                            FullName = "Lê Văn C",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900641/z5852813026004_885e224ee4b8dbfbb128e583c278a615_dicbrf.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU103",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU103"
                        },
                        new
                        {
                            Id = new Guid("3caad83a-46f4-4a8f-b2a7-cfce6ac27b88"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "pham.d@example.com",
                            FullName = "Phạm Thị D",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900641/5_ek2pks.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU104",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU104"
                        },
                        new
                        {
                            Id = new Guid("91313c9a-e9bd-4133-a89a-24eee9083112"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "hoang.e@example.com",
                            FullName = "Hoàng Văn E",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900641/z5852813011522_e3396b099fec5e01dc56a2331b757d8e_nsrnzc.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU105",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU105"
                        },
                        new
                        {
                            Id = new Guid("d8165d40-605a-4165-b15c-076ce3335d21"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "vu.f@example.com",
                            FullName = "Vũ Thị F",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900640/2_hlwinq.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU106",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU106"
                        },
                        new
                        {
                            Id = new Guid("9ee95ba6-b2d4-44d4-aeed-14648ca801a3"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "do.g@example.com",
                            FullName = "Đỗ Văn G",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900640/z5852813019059_6493ca13ee06ac935e9889fe51bd2886_ooz29c.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU107",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU107"
                        },
                        new
                        {
                            Id = new Guid("c51f83c8-0cbb-4865-9abe-055cb25167b4"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "bui.h@example.com",
                            FullName = "Bùi Thị H",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900639/13_gqcowy.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU108",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU108"
                        },
                        new
                        {
                            Id = new Guid("f5a6ee75-1390-4f09-b908-528dbfe8aac7"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "ngo.i@example.com",
                            FullName = "Ngô Văn I",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900640/4_yr3kyt.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU109",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU109"
                        },
                        new
                        {
                            Id = new Guid("4c9a5e82-3723-41d9-9a8c-9f91e58922ab"),
                            Address = "",
                            CitizenID = "",
                            ClassroomId = new Guid("afab05ef-e3e7-4902-a141-05c3057b92f3"),
                            Email = "dang.k@example.com",
                            FullName = "Đặng Thị K",
                            HomeTown = "",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900639/12_wsmqha.jpg",
                            ParentPhone = "",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "",
                            PublicStudentID = "MCU110",
                            RefreshToken = "",
                            RoleId = new Guid("01e27b7c-93ca-47f6-a09b-c7015717e2ed"),
                            StudentTypeId = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Username = "MCU110"
                        });
                });

            modelBuilder.Entity("BusinessObject.StudentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("studentTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5c14f0e-b4e9-4b88-b804-511bad973115"),
                            Code = "NORMAL_STUDENT",
                            TypeName = "Học sinh"
                        },
                        new
                        {
                            Id = new Guid("cb440230-818a-4ad8-96de-3ae6c403b1ab"),
                            Code = "CLASS_MONITOR",
                            TypeName = "Lớp trưởng"
                        },
                        new
                        {
                            Id = new Guid("468a8e7c-0ad1-465c-b570-5da68f276923"),
                            Code = "CLASS_VICE_MONITOR",
                            TypeName = "Lớp phó"
                        });
                });

            modelBuilder.Entity("BusinessObject.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("107f7c24-e063-4dfd-beb8-d955e1fd0f8a"),
                            Code = "MATHEMATICS",
                            SubjectName = "Toán học"
                        },
                        new
                        {
                            Id = new Guid("50d08f10-a2b8-4119-8053-e95f00cdf608"),
                            Code = "LITERATURE",
                            SubjectName = "Ngữ văn"
                        },
                        new
                        {
                            Id = new Guid("631135bd-81eb-4b70-a779-418af291d138"),
                            Code = "PHYSICS",
                            SubjectName = "Vật lý"
                        },
                        new
                        {
                            Id = new Guid("94aa1b88-0fb0-4669-a7d7-73793e453e94"),
                            Code = "CHEMISTRY",
                            SubjectName = "Hóa học"
                        },
                        new
                        {
                            Id = new Guid("669af09a-9f35-45b5-a2ce-1a9efbeeb476"),
                            Code = "BIOLOGY",
                            SubjectName = "Sinh học"
                        },
                        new
                        {
                            Id = new Guid("77faf4ba-c356-4633-9505-91e4c8402800"),
                            Code = "HISTORY",
                            SubjectName = "Lịch sử"
                        },
                        new
                        {
                            Id = new Guid("52e87219-4d5c-4d96-a944-a04292e2f617"),
                            Code = "GEOGRAPHY",
                            SubjectName = "Địa lý"
                        },
                        new
                        {
                            Id = new Guid("ab569adc-c289-48ee-9286-73cd9863458e"),
                            Code = "CIVIC_EDUCATION",
                            SubjectName = "Giáo dục công dân"
                        },
                        new
                        {
                            Id = new Guid("2a739d2f-6b40-4fe4-8cf3-6b2c47967a55"),
                            Code = "FOREIGN_LANGUAGE",
                            SubjectName = "Ngoại ngữ"
                        },
                        new
                        {
                            Id = new Guid("0aaf283b-4d65-42af-a998-938efe370318"),
                            Code = "INFORMATICS",
                            SubjectName = "Tin học"
                        },
                        new
                        {
                            Id = new Guid("7c756bba-6c1d-43db-8fb7-7c53295019a3"),
                            Code = "TECHNOLOGY",
                            SubjectName = "Công nghệ"
                        },
                        new
                        {
                            Id = new Guid("4e943f72-a5ee-427f-9594-83598d33f411"),
                            Code = "PHYSICAL_EDUCATION",
                            SubjectName = "Thể dục"
                        },
                        new
                        {
                            Id = new Guid("d3d41c42-c3b4-4713-b231-b2851634f378"),
                            Code = "MUSIC",
                            SubjectName = "Âm nhạc"
                        },
                        new
                        {
                            Id = new Guid("9e777928-8399-4efe-bd19-164b1f6acc8e"),
                            Code = "FINE_ART",
                            SubjectName = "Mỹ thuật"
                        },
                        new
                        {
                            Id = new Guid("a3d3b555-0cf4-4b41-8131-a4c205d9a6f3"),
                            Code = "DEFENSE_EDUCATION",
                            SubjectName = "Giáo dục quốc phòng"
                        },
                        new
                        {
                            Id = new Guid("b1d3b555-0cf4-4b41-8131-a4c205d9a6f4"),
                            Code = "SHDC",
                            SubjectName = "SHDC"
                        },
                        new
                        {
                            Id = new Guid("c2d3b555-0cf4-4b41-8131-a4c205d9a6f5"),
                            Code = "HDTN_HN",
                            SubjectName = "HĐTN-HN"
                        },
                        new
                        {
                            Id = new Guid("d3d3b555-0cf4-4b41-8131-a4c205d9a6f6"),
                            Code = "GDKT_PL",
                            SubjectName = "GDKT-PL"
                        },
                        new
                        {
                            Id = new Guid("e4d3b555-0cf4-4b41-8131-a4c205d9a6f7"),
                            Code = "SHCN",
                            SubjectName = "SHCN"
                        },
                        new
                        {
                            Id = new Guid("f5d3b555-0cf4-4b41-8131-a4c205d9a6f8"),
                            Code = "MATH_FRENCH",
                            SubjectName = "Toán Pháp"
                        });
                });

            modelBuilder.Entity("BusinessObject.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar");

                    b.Property<string>("CitizenID")
                        .HasMaxLength(15)
                        .HasColumnType("varchar");

                    b.Property<DateOnly?>("Dob")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Image")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Password")
                        .HasMaxLength(150)
                        .HasColumnType("varchar");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("PublicTeacherID")
                        .HasMaxLength(20)
                        .HasColumnType("varchar");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(250)
                        .HasColumnType("varchar");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("TeacherTypeId");

                    b.ToTable("Teacher");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc90f501-75fd-4a4e-84bf-cdcbca4e6d5d"),
                            Address = "",
                            CitizenID = "",
                            Email = "nguyenvana@example.com",
                            FullName = "Nguyễn Văn A",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900643/11_bnerzr.jpg",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "0912345678",
                            RoleId = new Guid("81b3444c-c9fd-4efc-a774-e1e3fc3c3e53"),
                            TeacherTypeId = new Guid("a8afb982-710b-4637-bcc7-babeee1e0599"),
                            Username = "0912345678"
                        },
                        new
                        {
                            Id = new Guid("493d052a-67a1-4428-981d-4d7831d3d344"),
                            Address = "",
                            CitizenID = "",
                            Email = "tranthib@example.com",
                            FullName = "Trần Thị B",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900643/z5852812999947_cb79c443d7ad6df3917b4a48111e4158_bpsx1v.jpg",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "0987654321",
                            RoleId = new Guid("81b3444c-c9fd-4efc-a774-e1e3fc3c3e53"),
                            TeacherTypeId = new Guid("a8afb982-710b-4637-bcc7-babeee1e0599"),
                            Username = "0987654321"
                        },
                        new
                        {
                            Id = new Guid("a1b2c3d4-5e6f-7a8b-9c0d-1e2f3a4b5c6d"),
                            Address = "",
                            CitizenID = "",
                            Email = "leminhc@example.com",
                            FullName = "Lê Minh C",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900642/10_bpqux3.jpg",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "0901234567",
                            RoleId = new Guid("81b3444c-c9fd-4efc-a774-e1e3fc3c3e53"),
                            TeacherTypeId = new Guid("a8afb982-710b-4637-bcc7-babeee1e0599"),
                            Username = "0901234567"
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-6f7a-8b9c-0d1e-2f3a4b5c6d7e"),
                            Address = "",
                            CitizenID = "",
                            Email = "phamthid@example.com",
                            FullName = "Phạm Thị D",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900642/9_l4nqzj.jpg",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "0934567890",
                            RoleId = new Guid("81b3444c-c9fd-4efc-a774-e1e3fc3c3e53"),
                            TeacherTypeId = new Guid("a8afb982-710b-4637-bcc7-babeee1e0599"),
                            Username = "0934567890"
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-7a8b-9c0d-1e2f-3a4b5c6d7e8f"),
                            Address = "",
                            CitizenID = "",
                            Email = "hoangvane@example.com",
                            FullName = "Hoàng Văn E",
                            Image = "https://res.cloudinary.com/duxrv1jlj/image/upload/v1726900642/1_pcvqfn.jpg",
                            Password = "$2y$06$usOR86Leu51BU3l2hmdjOeUBTmtJTG6OcFlFUZIwTiDtNcrGrdp22",
                            Phone = "0976543210",
                            RoleId = new Guid("81b3444c-c9fd-4efc-a774-e1e3fc3c3e53"),
                            TeacherTypeId = new Guid("a8afb982-710b-4637-bcc7-babeee1e0599"),
                            Username = "0976543210"
                        });
                });

            modelBuilder.Entity("BusinessObject.TeacherType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TeacherTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a8afb982-710b-4637-bcc7-babeee1e0599"),
                            Code = "DATA_ENTRY_TEACHER",
                            TypeName = "Giáo viên nhập liệu"
                        },
                        new
                        {
                            Id = new Guid("e5f785e3-4579-4465-b930-39b636a4d818"),
                            Code = "PRIMARY_TEACHER",
                            TypeName = "Giáo viên chủ nhiệm"
                        });
                });

            modelBuilder.Entity("BusinessObject.Admin", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BusinessObject.Attendance", b =>
                {
                    b.HasOne("BusinessObject.ScheduleDetail", "ScheduleDetail")
                        .WithMany("Attendances")
                        .HasForeignKey("ScheduleDetailId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ScheduleDetail");
                });

            modelBuilder.Entity("BusinessObject.AttendanceCharge", b =>
                {
                    b.HasOne("BusinessObject.Attendance", "Attendance")
                        .WithMany("AttendanceCharges")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BusinessObject.Student", "Student")
                        .WithMany("AttendanceCharges")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Attendance");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BusinessObject.AttendanceStatus", b =>
                {
                    b.HasOne("BusinessObject.Attendance", "Attendance")
                        .WithMany("AttendanceStatuses")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Reason", "Reason")
                        .WithMany("AttendanceStatuses")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObject.Status", "Status")
                        .WithMany("AttendanceStatuses")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Student", "Student")
                        .WithMany("AttendanceStatuses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Teacher", "Teacher")
                        .WithMany("AttendanceStatuses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Attendance");

                    b.Navigation("Reason");

                    b.Navigation("Status");

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BusinessObject.Classroom", b =>
                {
                    b.HasOne("BusinessObject.Grade", "Grade")
                        .WithMany("Classrooms")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("BusinessObject.ExtraActivitiesAttendance", b =>
                {
                    b.HasOne("BusinessObject.Attendance", "Attendance")
                        .WithMany("ExtraActivitiesAttendances")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Status", "Status")
                        .WithMany("ExtraActivitiesAttendances")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Student", "Student")
                        .WithMany("ExtraActivitiesAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");

                    b.Navigation("Status");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BusinessObject.Schedule", b =>
                {
                    b.HasOne("BusinessObject.Classroom", "Classroom")
                        .WithMany("Schedules")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Classroom");
                });

            modelBuilder.Entity("BusinessObject.ScheduleDetail", b =>
                {
                    b.HasOne("BusinessObject.Schedule", "Schedule")
                        .WithMany("ScheduleDetails")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Session", "Session")
                        .WithMany("ScheduleDetails")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("BusinessObject.Session", b =>
                {
                    b.HasOne("BusinessObject.Period", "Period")
                        .WithMany("Sessions")
                        .HasForeignKey("PeriodID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Period");
                });

            modelBuilder.Entity("BusinessObject.SlotDetail", b =>
                {
                    b.HasOne("BusinessObject.Classroom", "Classroom")
                        .WithMany("SlotDetails")
                        .HasForeignKey("ClassroomID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Session", "Session")
                        .WithMany("SlotDetails")
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Slot", "Slot")
                        .WithMany("SlotDetails")
                        .HasForeignKey("SlotID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Subject", "Subject")
                        .WithMany("SlotDetails")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Teacher", "Teacher")
                        .WithMany("SlotDetails")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Classroom");

                    b.Navigation("Session");

                    b.Navigation("Slot");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("BusinessObject.Student", b =>
                {
                    b.HasOne("BusinessObject.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("Students")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.StudentType", "StudentType")
                        .WithMany("Students")
                        .HasForeignKey("StudentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Classroom");

                    b.Navigation("Role");

                    b.Navigation("StudentType");
                });

            modelBuilder.Entity("BusinessObject.Teacher", b =>
                {
                    b.HasOne("BusinessObject.Role", "Role")
                        .WithMany("Teachers")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.TeacherType", "TeacherType")
                        .WithMany("Teachers")
                        .HasForeignKey("TeacherTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");

                    b.Navigation("TeacherType");
                });

            modelBuilder.Entity("BusinessObject.Attendance", b =>
                {
                    b.Navigation("AttendanceCharges");

                    b.Navigation("AttendanceStatuses");

                    b.Navigation("ExtraActivitiesAttendances");
                });

            modelBuilder.Entity("BusinessObject.Classroom", b =>
                {
                    b.Navigation("Schedules");

                    b.Navigation("SlotDetails");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("BusinessObject.Grade", b =>
                {
                    b.Navigation("Classrooms");
                });

            modelBuilder.Entity("BusinessObject.Period", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("BusinessObject.Reason", b =>
                {
                    b.Navigation("AttendanceStatuses");
                });

            modelBuilder.Entity("BusinessObject.Role", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Students");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("BusinessObject.Schedule", b =>
                {
                    b.Navigation("ScheduleDetails");
                });

            modelBuilder.Entity("BusinessObject.ScheduleDetail", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("BusinessObject.Session", b =>
                {
                    b.Navigation("ScheduleDetails");

                    b.Navigation("SlotDetails");
                });

            modelBuilder.Entity("BusinessObject.Slot", b =>
                {
                    b.Navigation("SlotDetails");
                });

            modelBuilder.Entity("BusinessObject.Status", b =>
                {
                    b.Navigation("AttendanceStatuses");

                    b.Navigation("ExtraActivitiesAttendances");
                });

            modelBuilder.Entity("BusinessObject.Student", b =>
                {
                    b.Navigation("AttendanceCharges");

                    b.Navigation("AttendanceStatuses");

                    b.Navigation("ExtraActivitiesAttendances");
                });

            modelBuilder.Entity("BusinessObject.StudentType", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("BusinessObject.Subject", b =>
                {
                    b.Navigation("SlotDetails");
                });

            modelBuilder.Entity("BusinessObject.Teacher", b =>
                {
                    b.Navigation("AttendanceStatuses");

                    b.Navigation("SlotDetails");
                });

            modelBuilder.Entity("BusinessObject.TeacherType", b =>
                {
                    b.Navigation("Teachers");
                });
#pragma warning restore 612, 618
        }
    }
}
